{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 178,
      "metadata": {
        "id": "vYpMuI4YUG0u"
      },
      "outputs": [],
      "source": [
        "import math\n",
        "import pickle\n",
        "import pandas as pd\n",
        "import torch\n",
        "from matplotlib import pyplot as plt\n",
        "from torch import nn\n",
        "import numpy as np\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "from tqdm import tqdm\n",
        "import os"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 191,
      "metadata": {},
      "outputs": [],
      "source": [
        "#\n",
        "# Execution parameters\n",
        "#\n",
        "\n",
        "FILES_PATH=\"preprocessed_datasets/\"\n",
        "DATASET_NAME=\"coronavirus_2021q1_all_preprocessed\"\n",
        "BATCH_SIZE=2**12\n",
        "TRAIN_TEST_METHOD=\"controlled\" # random or controlled\n",
        "MODEL_ARCHITECTURE=\"toxicity_simple\" # toxicity_simple, toxicity_NCF, toxicity_BOW\n",
        "\n",
        "TRAIN_MODE=\"train\" # train, grid_search\n",
        "\n",
        "# Grid search parameters\n",
        "learning_rates=[1e-3,1e-4]\n",
        "n_factors=[16,32,64,128]\n",
        "l2_reg=[1e-3,5e-5,0]\n",
        "\n",
        "\n",
        "epochs=50"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 192,
      "metadata": {
        "id": "aMmikBfiUG0v",
        "outputId": "72829fda-0f7a-430b-c494-afcb1a256da3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Toxic interactions: 9.35%\n"
          ]
        }
      ],
      "source": [
        "#\n",
        "# Read dataset and obtain the basic model inputs and outputs\n",
        "#\n",
        "\n",
        "df=pd.read_csv(f'{FILES_PATH}/{DATASET_NAME}_preprocessed_toxicity.csv',encoding='UTF_8')\n",
        "\n",
        "#We roughly defined a (user,subreddit) interaction as toxic when the mean toxicity is >0\n",
        "df=df.groupby(['author_id','subreddit_id'],as_index=False)['Toxicity'].mean()\n",
        "df['Toxicity']=df['Toxicity'].apply(lambda x: 0 if x<0 else 1)\n",
        "\n",
        "print(f\"Toxic interactions: {(100*(df['Toxicity'].sum()/len(df['Toxicity']))):.2f}%\") #Percentage of toxic interactions (not comments!)\n",
        "\n",
        "#Primary inputs (author_id, subreddit_id)\n",
        "x=df.drop(['Toxicity'],axis=1).to_numpy().astype(int)\n",
        "\n",
        "#Outputs (interaction toxicity)\n",
        "y=df['Toxicity'].to_numpy()\n",
        "\n",
        "n_users=df['author_id'].nunique()\n",
        "n_subreddits=df['subreddit_id'].nunique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 193,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 300x300 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 300x300 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#\n",
        "# Data analysis and plots\n",
        "#\n",
        "\n",
        "plt.rcParams[\"figure.figsize\"]=(3,3)\n",
        "\n",
        "#Plot histogram of Avg. Toxicity per user\n",
        "avg_toxicity_per_user=df.groupby(['author_id'],as_index=False)['Toxicity'].mean()\n",
        "avg_toxicity_per_user['Toxicity'].plot.hist()\n",
        "plt.show()\n",
        "\n",
        "#Obtain dataframe with (user_id,comment_count,mean_toxicity)\n",
        "no_comments_per_user=df.groupby(['author_id'],as_index=False).size()\n",
        "no_comments_per_user[\"mean_toxicity\"]=avg_toxicity_per_user[\"Toxicity\"]\n",
        "\n",
        "#** Obtain dataframe with (number_of_comments, avg toxicity for users with number_of_comments)\n",
        "avg_toxicity_per_interaction_count=no_comments_per_user.groupby(['size'],as_index=False)['mean_toxicity'].mean()\n",
        "\n",
        "#Obtain dataframe with (number_of_comments, number of users with number_of_comments comments)\n",
        "no_users_per_comment_count=no_comments_per_user.rename(columns={'size':'comment_count'}).groupby(['comment_count'],as_index=False).size()\n",
        "\n",
        "#Obtain regression for **\n",
        "m, b = np.polyfit(no_comments_per_user[\"size\"].to_numpy(), avg_toxicity_per_user['Toxicity'].to_numpy(), 1)\n",
        "\n",
        "#Plot everything:\n",
        "\n",
        "#Left y-axis\n",
        "plt.plot(no_comments_per_user[\"size\"].to_numpy(), avg_toxicity_per_user['Toxicity'].to_numpy(), 'o', alpha=0.005, c='black',label=\"Individual user data points\\n(no. of interactions, avg. toxicity)\")\n",
        "plt.plot(avg_toxicity_per_interaction_count[\"size\"].to_numpy(), avg_toxicity_per_interaction_count['mean_toxicity'].to_numpy(), 'o', alpha=.8, c='red', label=\"Avg. toxicity of users with n interactions\")\n",
        "plt.plot(no_comments_per_user[\"size\"].to_numpy(), m*no_comments_per_user[\"size\"].to_numpy() + b)\n",
        "\n",
        "plt.ylim((0,1))\n",
        "plt.xlim((0,25))\n",
        "\n",
        "plt.xlabel(\"(user,subreddit) interactions\")\n",
        "plt.ylabel(\"Average interaction toxicity of user\")\n",
        "\n",
        "plt.legend(bbox_to_anchor=(1.3, 1), loc=\"upper left\")\n",
        "\n",
        "#Switch axis\n",
        "plt.twinx()\n",
        "\n",
        "#Right y-axis\n",
        "plt.plot(no_users_per_comment_count[\"comment_count\"].to_numpy(),no_users_per_comment_count[\"size\"].to_numpy(),color='green',label=\"No. of users per interaction count\")\n",
        "\n",
        "plt.ylim((0,3000))\n",
        "\n",
        "plt.ylabel(\"No. of Users\")\n",
        "\n",
        "plt.legend(bbox_to_anchor=(1.3, 0.7), loc=\"upper left\")\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 194,
      "metadata": {
        "id": "JqzSJzbdUG0x",
        "outputId": "846b0901-0dd4-40c4-ccde-2d046c6c9d05"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Total test samples: 4224\n",
            "Applying a weight of 10.97 for positive samples in training loss\n"
          ]
        }
      ],
      "source": [
        "#\n",
        "# Define and perform train/test split, generate datasets\n",
        "#\n",
        "\n",
        "def train_test_split(df):\n",
        "    user_groups=df.groupby('author_id')\n",
        "\n",
        "    test=[]\n",
        "\n",
        "    # Approach \"random\": If the user posts in more than 10 subreddits, use them for training set (10% of their interactions)\n",
        "    if TRAIN_TEST_METHOD==\"random\":\n",
        "        for _,group in user_groups:\n",
        "            if group.shape[0]>=10:\n",
        "                test+=(group.sample(n=int(group.shape[0]*0.15)).to_dict(orient=\"records\"))\n",
        "\n",
        "    # Approach \"controlled\": If they post in more than 10 subreddits AND have a\n",
        "    elif TRAIN_TEST_METHOD==\"controlled\":\n",
        "        for _,group in user_groups:\n",
        "            if group.shape[0]>=10 and group[\"Toxicity\"].sum()>1 and (group[\"Toxicity\"].shape[0]-group[\"Toxicity\"].sum()>1):\n",
        "                test += (group[group[\"Toxicity\"]==1].sample(1).to_dict(orient=\"records\"))\n",
        "                test += (group[group[\"Toxicity\"]==0].sample(1).to_dict(orient=\"records\"))\n",
        "\n",
        "    test = pd.DataFrame(test)\n",
        "    print(f\"Total test samples: {test.shape[0]}\")\n",
        "\n",
        "    train = pd.concat([df, test]).drop_duplicates(keep=False)\n",
        "    \n",
        "    # Unccomment for oversampling toxic interactions in train set\n",
        "    # train = pd.concat([train,pd.concat([train[train[\"Toxicity\"]==1]]*(round(toxic_labels_weight)-1))])\n",
        "    \n",
        "    return train, test\n",
        "\n",
        "#Split train and test sets\n",
        "\n",
        "train,test=train_test_split(df) \n",
        "\n",
        "toxic_labels_weight=(len(train['Toxicity'])-train['Toxicity'].sum())/train['Toxicity'].sum()\n",
        "print(f\"Applying a weight of {toxic_labels_weight:.2f} for positive samples in training loss\")\n",
        "\n",
        "X_train=train.drop(['Toxicity'],axis=1).to_numpy().astype(int)\n",
        "X_test=test.drop(['Toxicity'],axis=1).to_numpy().astype(int)\n",
        "\n",
        "y_train=train['Toxicity'].to_numpy()\n",
        "y_test=test['Toxicity'].to_numpy()\n",
        "\n",
        "X_train, X_test = torch.Tensor(X_train).int(), torch.Tensor(X_test).int()\n",
        "y_train, y_test = torch.Tensor(y_train).float(), torch.Tensor(y_test).float()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 195,
      "metadata": {
        "id": "9n0G9UlvUG0x"
      },
      "outputs": [],
      "source": [
        "#\n",
        "# Load BOW arrays if using that architecture\n",
        "#\n",
        "\n",
        "\n",
        "if MODEL_ARCHITECTURE==\"toxicity_BOW\":\n",
        "\n",
        "    #Load users' and subreddits' Bag of Words\n",
        "    user_bows=pickle.load(open(\"preprocessed_datasets/coronavirus_2021q1_all_preprocessed_USERS_BAG_OF_WORDS\",\"rb\"))\n",
        "    subreddit_bows=pickle.load(open(\"preprocessed_datasets/coronavirus_2021q1_all_preprocessed_SUBREDDIT_BAG_OF_WORDS\",\"rb\"))\n",
        "\n",
        "    #We're gonna work with binary vectors for now\n",
        "    user_bows[user_bows>1]=1\n",
        "    subreddit_bows[subreddit_bows>1]=1\n",
        "\n",
        "    user_bows=torch.Tensor(user_bows).float() \n",
        "    subreddit_bows=torch.Tensor(subreddit_bows).float()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 196,
      "metadata": {
        "id": "mo8bov0JUG0x"
      },
      "outputs": [],
      "source": [
        "#\n",
        "# Define the model architecture\n",
        "#\n",
        "\n",
        "class ToxicitySimple(nn.Module):\n",
        "    def __init__(self,d):\n",
        "        super(ToxicitySimple,self).__init__()\n",
        "\n",
        "        #We only have one trainable layer depth (two Embeddings and two FC's)\n",
        "\n",
        "        self.u = nn.Embedding(n_users,d)                #Embedding author_id -> n_factors\n",
        "        self.m = nn.Embedding(n_subreddits,d)           #Embedding subreddit_id-> n_factors\n",
        "        # self.u1 = nn.Linear(user_bows.shape[1],n_factors)       #FC        author bow -> n_factors\n",
        "        # self.m1 = nn.Linear(subreddit_bows.shape[1],n_factors)  #FC        subreddit bow -> n_factors\n",
        "\n",
        "        #Initialize weights\n",
        "        self.u.weight.data.uniform_(-0.1, 0.1)\n",
        "        self.m.weight.data.uniform_(-0.1, 0.1)\n",
        "        # self.u1.weight.data.uniform_(-0.05, 0.05)\n",
        "        # self.m1.weight.data.uniform_(-0.05, 0.05)\n",
        "\n",
        "    def forward(self, x):\n",
        "        users, subreddits = x[:,0] , x[:,1] #Get author_id and subreddit_id from input\n",
        "        # ubows, sbows = user_bows[x[:,0].long()], subreddit_bows[x[:, 1].long()] #Get author bow and subreddit bow indirectly from input\n",
        "        u,m = self.u(users), self.m(subreddits) #Embed author and subreddit\n",
        "        # u,m = self.u1(u), self.m1(m)\n",
        "        # u1, m1 = self.u1(ubows), self.m1(sbows) #Reduce dimensionality of author bow and subreddit bow\n",
        "        \n",
        "        #Concat u with u1, and m with m1. Compute the dot product of the resulting vectors, and pass the value through a sigmoid.\n",
        "\n",
        "        #If using the model with BOW and BCE\n",
        "        # return torch.sigmoid((torch.cat((u, u1), 1) * torch.cat((m, m1), 1)).sum(1).view(-1, 1)) #Sigmoid\n",
        "\n",
        "        #If using simple model and BCE\n",
        "        # return torch.sigmoid((u*m).sum(1).view(-1, 1))\n",
        "\n",
        "        #For simple model and BCEwithLogits\n",
        "        return (u*m).sum(1).view(-1, 1)\n",
        "\n",
        "#References: https://towardsdatascience.com/paper-review-neural-collaborative-filtering-explanation-implementation-ea3e031b7f96\n",
        "class ToxicityNCF(nn.Module):\n",
        "    def __init__(self,d):\n",
        "        super(ToxicityNCF,self).__init__()\n",
        "\n",
        "        #We only have one trainable layer depth (two Embeddings and two FC's)\n",
        "        self.u_mf = nn.Embedding(n_users,d)                #Embedding author_id -> n_factors\n",
        "        self.u_mlp = nn.Embedding(n_users,d)                #Embedding author_id -> n_factors\n",
        "        self.m_mf = nn.Embedding(n_subreddits,d)           #Embedding subreddit_id-> n_factors\n",
        "        self.m_mlp = nn.Embedding(n_subreddits,d)           #Embedding subreddit_id-> n_factors\n",
        "\n",
        "        #Initialize weights\n",
        "        self.u_mf.weight.data.uniform_(-0.5, 0.5)\n",
        "        self.u_mlp.weight.data.uniform_(-0.5, 0.5)\n",
        "\n",
        "        self.m_mf.weight.data.uniform_(-0.5, 0.5)\n",
        "        self.m_mlp.weight.data.uniform_(-0.5, 0.5)\n",
        "\n",
        "        self.fc_mf_1 = nn.Linear(d,d//2)\n",
        "        self.fc_mf_2 = nn.Linear(d//2,d//4)\n",
        "\n",
        "        self.fc_mf_1.weight.data.uniform_(-0.5, 0.5)\n",
        "        self.fc_mf_2.weight.data.uniform_(-0.5, 0.5)\n",
        "\n",
        "        self.fc_mlp_1 = nn.Linear(d*2,d)\n",
        "        self.fc_mlp_2 = nn.Linear(d,d//2)\n",
        "        self.fc_mlp_3 = nn.Linear(d//2,d//4)\n",
        "\n",
        "        self.fc_mlp_1.weight.data.uniform_(-0.5, 0.5)\n",
        "        self.fc_mlp_2.weight.data.uniform_(-0.5, 0.5)\n",
        "        self.fc_mlp_3.weight.data.uniform_(-0.5, 0.5)\n",
        "\n",
        "        self.neumf = nn.Linear(d//2,1)\n",
        "        self.neumf.weight.data.uniform_(-0.5, 0.5)\n",
        "\n",
        "        self.dropout=nn.Dropout(0.1)\n",
        "\n",
        "    def forward(self, x):\n",
        "        \n",
        "        users, subreddits = x[:,0] , x[:,1] #Get author_id and subreddit_id from input\n",
        "        # ubows, sbows = user_bows[x[:,0].long()], subreddit_bows[x[:, 1].long()] #Get author bow and subreddit bow indirectly from input\n",
        "        u_mf, m_mf = self.u_mf(users), self.m_mf(subreddits) #Embed author and subreddit\n",
        "\n",
        "        u_mlp, m_mlp = self.u_mlp(users), self.m_mlp(subreddits)\n",
        "\n",
        "        mf = self.dropout(nn.functional.relu(self.fc_mf_1(u_mf*m_mf)))\n",
        "        mf = self.dropout(nn.functional.relu(self.fc_mf_2(mf)))\n",
        "\n",
        "        mlp = self.dropout(nn.functional.relu(self.fc_mlp_1(torch.cat((u_mlp,m_mlp),1))))\n",
        "        mlp = self.dropout(nn.functional.relu(self.fc_mlp_2(mlp)))\n",
        "        mlp = self.dropout(nn.functional.relu(self.fc_mlp_3(mlp)))\n",
        "\n",
        "        neumf = self.neumf(torch.cat((mf,mlp),1))\n",
        "\n",
        "        return neumf\n",
        "\n",
        "class ToxicityBOW(nn.Module):\n",
        "    def __init__(self,d):\n",
        "        super(ToxicityBOW,self).__init__()\n",
        "\n",
        "        #We only have one trainable layer depth (two Embeddings and two FC's)\n",
        "\n",
        "        self.u = nn.Embedding(n_users,d)                #Embedding author_id -> n_factors\n",
        "        self.m = nn.Embedding(n_subreddits,d)           #Embedding subreddit_id-> n_factors\n",
        "        self.u1 = nn.Linear(user_bows.shape[1],d)       #FC        author bow -> n_factors\n",
        "        self.m1 = nn.Linear(subreddit_bows.shape[1],d)  #FC        subreddit bow -> n_factors\n",
        "\n",
        "        #Initialize weights\n",
        "        self.u.weight.data.uniform_(-0.1, 0.1)\n",
        "        self.m.weight.data.uniform_(-0.1, 0.1)\n",
        "        self.u1.weight.data.uniform_(-0.1, 0.1)\n",
        "        self.m1.weight.data.uniform_(-0.1, 0.1)\n",
        "\n",
        "    def forward(self, x):\n",
        "        users, subreddits = x[:,0] , x[:,1] #Get author_id and subreddit_id from input\n",
        "        ubows, sbows = user_bows[x[:,0].long()], subreddit_bows[x[:, 1].long()] #Get author bow and subreddit bow indirectly from input\n",
        "        u,m = self.u(users), self.m(subreddits) #Embed author and subreddit\n",
        "        u1, m1 = self.u1(ubows), self.m1(sbows) #Reduce dimensionality of author bow and subreddit bow\n",
        "        \n",
        "        #Concat u with u1, and m with m1. Compute the dot product of the resulting vectors, and pass the value through a sigmoid.\n",
        "\n",
        "        #If using the model with BOW and BCE\n",
        "        return (torch.cat((u, u1), 1) * torch.cat((m, m1), 1)).sum(1).view(-1, 1) \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 197,
      "metadata": {
        "id": "fASFMYWrUG0y"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Toxic interactions (positive samples) in train test: 8.35%\n",
            "Toxic interactions (positive samples) in test test: 50.00%\n"
          ]
        }
      ],
      "source": [
        "#\n",
        "# Create the Dataset and Dataloader objects for train and test sets\n",
        "#\n",
        "\n",
        "class ToxicityDataset(Dataset):\n",
        "    def __init__(self):\n",
        "        self.x=X_train\n",
        "        self.y=y_train\n",
        "        self.n_samples=X_train.size(0)\n",
        "    def __getitem__(self, index):\n",
        "        return self.x[index],self.y[index]\n",
        "    def __len__(self):\n",
        "        return self.n_samples\n",
        "\n",
        "class TestDataset(Dataset):\n",
        "    def __init__(self):\n",
        "        self.x=X_test\n",
        "        self.y=y_test\n",
        "        self.n_samples=X_test.size(0)\n",
        "    def __getitem__(self, index):\n",
        "        return self.x[index],self.y[index]\n",
        "    def __len__(self):\n",
        "        return self.n_samples\n",
        "\n",
        "train_data=ToxicityDataset()\n",
        "dataloader=DataLoader(dataset=train_data,batch_size=BATCH_SIZE,shuffle=True)\n",
        "\n",
        "test_data=TestDataset()\n",
        "test_dataloader=DataLoader(dataset=test_data,batch_size=BATCH_SIZE,shuffle=True)\n",
        "\n",
        "print(f\"Toxic interactions (positive samples) in train test: {np.average(y_train)*100:.2f}%\")\n",
        "print(f\"Toxic interactions (positive samples) in test test: {np.average(y_test)*100:.2f}%\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 198,
      "metadata": {
        "id": "zS4VQMToUG0y",
        "outputId": "7067110c-13fb-45af-b8b7-3a604204c28e"
      },
      "outputs": [],
      "source": [
        "#\n",
        "# Define the training cycle for the model\n",
        "#\n",
        "\n",
        "def train_toxicity_model(n_factors=64,learning_rate=1e-3,l2_reg=1e-5,epochs=10):\n",
        "    print(f\"Current parameters are d:{n_factors} | L.Rate:{learning_rate} | L2 Reg:{l2_reg}\")\n",
        "    \n",
        "    losses=[]\n",
        "    losses_test=[]\n",
        "    accuracies=[]\n",
        "    accuracies_test=[]\n",
        "    TPRs=[]\n",
        "    TPRs_test=[]\n",
        "    \n",
        "    Iterations=[]\n",
        "\n",
        "    #Initialize model\n",
        "    if MODEL_ARCHITECTURE==\"toxicity_simple\":\n",
        "        model = ToxicitySimple(n_factors)\n",
        "    elif MODEL_ARCHITECTURE==\"toxicity_NCF\":\n",
        "        model = ToxicityNCF(n_factors)\n",
        "    elif MODEL_ARCHITECTURE==\"toxicity_BOW\":\n",
        "        model = ToxicityBOW(n_factors)\n",
        "        \n",
        "    #Model configuration\n",
        "    optimizer=torch.optim.Adam(model.parameters(), learning_rate, weight_decay=l2_reg) #Weight_decay acts as L2 regularization apparently\n",
        "\n",
        "    print(\"EPOCH\\tLOSS_TRAIN\\tLOSS_TEST\\tACC_TRAIN\\tACC_TEST\\tTP\\tFP\\tFN\\tTN\\tTPR_TRAIN\\tTPR_TEST\")\n",
        "    # for epoch in tqdm(range(int(epochs)), desc='Training Epochs'):\n",
        "    for epoch in range(int(epochs)):\n",
        "\n",
        "        loss_train=0\n",
        "        \n",
        "        fn=0\n",
        "        fp=0\n",
        "        tn=0\n",
        "        tp=0\n",
        "\n",
        "        #Iterate training over train batches\n",
        "        for i,(inputs,labels) in enumerate(dataloader):\n",
        "            optimizer.zero_grad()  # Setting our stored gradients equal to zero\n",
        "\n",
        "            outputs = torch.squeeze(model(inputs))\n",
        "\n",
        "            #References: https://stackoverflow.com/questions/71462326/pytorch-bcewithlogitsloss-calculating-pos-weight\n",
        "            # https://discuss.pytorch.org/t/bceloss-vs-bcewithlogitsloss/33586 (apparently more numerically stable than BCELoss)\n",
        "            criterion = torch.nn.BCEWithLogitsLoss(pos_weight=torch.Tensor([toxic_labels_weight]))\n",
        "\n",
        "            loss = criterion(outputs, labels)\n",
        "\n",
        "            loss_train += loss.item()*inputs.size(0)\n",
        "\n",
        "            loss.backward()  # Computes the gradient of the given tensor w.r.t. the weights/bias\n",
        "\n",
        "            optimizer.step()  # Updates weights and biases with the optimizer (Adam)\n",
        "\n",
        "            #https://discuss.pytorch.org/t/bcewithlogitsloss-and-model-accuracy-calculation/59293\n",
        "            predicted_train = ((outputs > 0.0)).float().detach().numpy()\n",
        "            \n",
        "            labels_train = labels.detach().numpy()\n",
        "\n",
        "\n",
        "            tp += np.sum(np.logical_and(predicted_train,labels_train))\n",
        "            tn += np.sum(np.logical_and(np.logical_not(predicted_train),np.logical_not(labels_train)))\n",
        "            fn += np.sum(np.logical_and(np.logical_not(predicted_train),labels_train))\n",
        "            fp += np.sum(np.logical_and(predicted_train,np.logical_not(labels_train)))\n",
        "\n",
        "        TPRs.append(100*tp/(tp+fn))\n",
        "                \n",
        "        accuracy = 100 * (tp+tn) / y_train.size(0)\n",
        "        \n",
        "        loss_train = loss_train/y_train.size(0)\n",
        "            \n",
        "        losses.append(loss_train)\n",
        "        accuracies.append(accuracy)\n",
        "    \n",
        "           \n",
        "        with torch.no_grad():\n",
        "            # Compute metrics for test dataset\n",
        "\n",
        "            loss_test=0\n",
        "\n",
        "            fn=0\n",
        "            fp=0\n",
        "            tn=0\n",
        "            tp=0\n",
        "\n",
        "            for j, (test_inputs, test_labels) in enumerate(test_dataloader):\n",
        "                \n",
        "                outputs_test = torch.squeeze(model(test_inputs))\n",
        "\n",
        "                if TRAIN_TEST_METHOD==\"random\":\n",
        "                    criterion = torch.nn.BCEWithLogitsLoss(pos_weight=torch.Tensor([toxic_labels_weight]))\n",
        "                elif TRAIN_TEST_METHOD==\"controlled\":\n",
        "                    criterion = torch.nn.BCEWithLogitsLoss()\n",
        "\n",
        "                loss_test += criterion(outputs_test, test_labels).item()*test_inputs.size(0)\n",
        "\n",
        "                predicted_test = ((outputs_test > 0.0)).detach().numpy()\n",
        "\n",
        "                labels_test = test_labels.detach().numpy()\n",
        "\n",
        "                tp += np.sum(np.logical_and(predicted_test,labels_test))\n",
        "                tn += np.sum(np.logical_and(np.logical_not(predicted_test),np.logical_not(labels_test)))\n",
        "                fn += np.sum(np.logical_and(np.logical_not(predicted_test),labels_test))\n",
        "                fp += np.sum(np.logical_and(predicted_test,np.logical_not(labels_test)))\n",
        "\n",
        "            accuracy_test = 100 * (tn+tp) / y_test.size(0)\n",
        "\n",
        "            loss_test = loss_test/y_test.size(0)\n",
        "\n",
        "            losses_test.append(loss_test)\n",
        "            accuracies_test.append(accuracy_test)\n",
        "\n",
        "            # Calculating the loss and accuracy for the train dataset.\n",
        "\n",
        "            Iterations.append(iter)\n",
        "\n",
        "            TPRs_test.append(100*tp/(tp+fn))\n",
        "\n",
        "            avg_1_train=np.average(torch.squeeze(outputs)[np.where(labels_train==1)])\n",
        "            avg_1_test=np.average(outputs_test[np.where(labels_test==1)])\n",
        "            \n",
        "            print(f\"{epoch}\\t{loss_train:.7f}\\t{loss_test:.7f}\\t{accuracy:.2f}\\t\\t{accuracy_test:.2f}\\t\\t{tp}\\t{fp}\\t{fn}\\t{tn}\\t{TPRs[-1]:.2f}\\t\\t{TPRs_test[-1]:.2f}\",end=\"\\r\")\n",
        "    \n",
        "    print(f\"{epoch}\\t{loss_train:.7f}\\t{loss_test:.7f}\\t{accuracy:.2f}\\t\\t{accuracy_test:.2f}\\t\\t{tp}\\t{fp}\\t{fn}\\t{tn}\\t{TPRs[-1]:.2f}\\t{TPRs_test[-1]:.2f}\")\n",
        "    return losses,losses_test,accuracies,accuracies_test, TPRs, TPRs_test\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 199,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Current parameters are d:16 | L.Rate:0.001 | L2 Reg:0.001\n",
            "EPOCH\tLOSS_TRAIN\tLOSS_TEST\tACC_TRAIN\tACC_TEST\tTP\tFP\tFN\tTN\tTPR_TRAIN\tTPR_TEST\n",
            "49\t1.2705239\t0.6931472\t51.73\t\t50.73\t\t1053\t1022\t1059\t1090\t47.84\t49.866\n",
            "Current parameters are d:16 | L.Rate:0.001 | L2 Reg:5e-05\n",
            "EPOCH\tLOSS_TRAIN\tLOSS_TEST\tACC_TRAIN\tACC_TEST\tTP\tFP\tFN\tTN\tTPR_TRAIN\tTPR_TEST\n",
            "49\t0.4060801\t0.8050962\t94.18\t\t51.96\t\t911\t828\t1201\t1284\t99.74\t43.13349\n",
            "Current parameters are d:16 | L.Rate:0.001 | L2 Reg:0\n",
            "EPOCH\tLOSS_TRAIN\tLOSS_TEST\tACC_TRAIN\tACC_TEST\tTP\tFP\tFN\tTN\tTPR_TRAIN\tTPR_TEST\n",
            "47\t0.1740933\t0.9829646\t95.81\t\t50.73\t\t764\t733\t1348\t1379\t100.00\t\t36.170\r"
          ]
        }
      ],
      "source": [
        "#\n",
        "# Perform grid search\n",
        "#\n",
        "\n",
        "# Figures are saved in pdf format in a folder specific to configuration. One figure is created \n",
        "# per each *d* used, with one subfigure per each (lr, L2 reg) combination\n",
        "directory_path = f\"grid_search/{MODEL_ARCHITECTURE}_split{TRAIN_TEST_METHOD}_e{epochs}\"\n",
        "os.makedirs(directory_path,exist_ok=True)\n",
        "\n",
        "for d in n_factors:\n",
        "    i=1\n",
        "\n",
        "    plt.figure(figsize=(20,(20*min(len(learning_rates),len(l2_reg)))/max(len(learning_rates),len(l2_reg))))\n",
        "\n",
        "    for lr in learning_rates:\n",
        "        for reg in l2_reg:\n",
        "            losses,losses_test,accuracies,accuracies_test,TPRs,TPRs_test = train_toxicity_model(n_factors=d,learning_rate=lr,l2_reg=reg,epochs=epochs)\n",
        "\n",
        "            #Plot current training interation:\n",
        "            plt.subplot(len(learning_rates),len(l2_reg),i)\n",
        "            plt.title(f\"d={d} | lr={lr} | l2-reg={reg}\",fontdict={'fontsize': 12})\n",
        "\n",
        "            plt.xticks(np.arange(0,epochs+1,20),fontsize=12)\n",
        "            plt.yticks(np.arange(0,5,0.5),fontsize=12)\n",
        "\n",
        "            plt.ylim(0,5)\n",
        "            \n",
        "            plt.plot(np.arange(0,epochs,1),losses, color=\"red\",alpha=.25,label=\"Train Loss\") #Train loss evolution\n",
        "            plt.plot(np.arange(0,epochs,1),losses_test, color=\"blue\",alpha=.25,label=\"Test Loss\") #Test loss evolution\n",
        "\n",
        "            if i==1: plt.legend(loc=\"upper left\")\n",
        "\n",
        "            plt.twinx() #Swap axis\n",
        "\n",
        "            plt.yticks(np.arange(30,101,10),fontsize=12)\n",
        "\n",
        "            plt.ylim(30,100)\n",
        "\n",
        "            plt.plot(np.arange(0,epochs,1),accuracies, color=\"red\", label=\"Train Acc\")         #Train acc evolution\n",
        "            plt.plot(np.arange(0,epochs,1),accuracies_test, color=\"blue\", label=\"Test Acc\")   #Test acc evolution\n",
        "\n",
        "            plt.plot(np.arange(0,epochs,1),TPRs, '--', color=\"red\", label=\"Train TPR (%)\" , alpha=.3)   # Train TPR (%) evolution\n",
        "            plt.plot(np.arange(0,epochs,1),TPRs_test, '--', color=\"blue\", label=\"Test TPR (%)\", alpha=.3)   #Test TPR (%) evolution\n",
        "\n",
        "            if i==1: plt.legend(loc=\"center left\")\n",
        "            i+=1\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(f\"{directory_path}/d_{d}.pdf\")"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3.9.13 ('venv39': venv)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.13"
    },
    "orig_nbformat": 4,
    "vscode": {
      "interpreter": {
        "hash": "9a082d3406cd0d61bcbff0851a12f8f182cb0547ed09fa71e3918320ec48f835"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
